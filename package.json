{
  "name": "tc54-build-cyclonedx",
  "version": "1.0.0",
  "type": "module",
  "engines": {
    "node": ">= 18"
  },
  "bin": {
    "jsonschema-ecma-docgen": "./index.js"
  },
  "scripts": {
    "fetch:cdx-schema": "node --input-type=module -e \"import fs from 'fs'; import { mkdirSync, writeFileSync } from 'fs'; import { basename } from 'path'; const url='https://raw.githubusercontent.com/CycloneDX/specification/refs/tags/1.7/schema/bom-1.7.schema.json'; const res=await fetch(url); const text=await res.text(); const filename=basename(url); const dir='schemas'; mkdirSync(dir, { recursive: true }); writeFileSync(dir + '/' + filename, text);\"",
    "fetch:jsf-schema": "node --input-type=module -e \"import fs from 'fs'; import { mkdirSync, writeFileSync } from 'fs'; import { basename } from 'path'; const url='https://raw.githubusercontent.com/CycloneDX/specification/refs/tags/1.7/schema/jsf-0.82.schema.json'; const res=await fetch(url); const text=(await res.text()).replaceAll('#/definitions', 'jsf-0.82.schema.json#/definitions'); const filename=basename(url); const dir='schemas'; mkdirSync(dir, { recursive: true }); writeFileSync(dir + '/' + filename, text);\"",
    "fetch:spdx-schema": "node --input-type=module -e \"import fs from 'fs'; import { mkdirSync, writeFileSync } from 'fs'; import { basename } from 'path'; const url='https://raw.githubusercontent.com/CycloneDX/specification/refs/tags/1.7/schema/spdx.schema.json'; const res=await fetch(url); const text=await res.text(); const filename=basename(url); const dir='schemas'; mkdirSync(dir, { recursive: true }); writeFileSync(dir + '/' + filename, text);\"",
    "fetch:crypto-schema": "node --input-type=module -e \"import fs from 'fs'; import { mkdirSync, writeFileSync } from 'fs'; import { basename } from 'path'; const url='https://raw.githubusercontent.com/CycloneDX/specification/refs/tags/1.7/schema/cryptography-defs.schema.json'; const res=await fetch(url); const text=await res.text(); const filename=basename(url); const dir='schemas'; mkdirSync(dir, { recursive: true }); writeFileSync(dir + '/' + filename, text);\"",
    "generate-spec": "npm run fetch:cdx-schema && npm run fetch:crypto-schema && npm run fetch:jsf-schema && npm run fetch:spdx-schema && node index.js",
    "ipr-check": "node scripts/check-form Ecma-TC54/ECMA-424 HEAD --all",
    "build-head-original": "npm run build-only -- --lint-spec --strict",
    "build-head": "npm run build-only -- --lint-spec",
    "prebuild-only": "npm run clean && mkdir out && cp -R img out",
    "build-only": "ecmarkup --verbose spec.html --multipage out",
    "build": "npm run build-head",
    "build-for-pdf": "npm run prebuild-only && ecmarkup --verbose spec.html out/index.html --assets external --assets-dir out --printable --lint-spec",
    "pdf": "npm run build-for-pdf && prince-books --script ./node_modules/ecmarkup/js/print.js out/index.html -o out/ECMA-424.pdf",
    "local-dev-pdf": "npm run generate-spec && npm run pdf",
    "prebuild-snapshot": "npm run clean",
    "build-snapshot": "npm run build-head && node scripts/insert_snapshot_warning.js",
    "clean": "rm -rf out",
    "format": "emu-format --write spec.html",
    "test": "exit 0",
    "watch": "npm run build-only -- --lint-spec --watch",
    "check-commit": "node scripts/check-commit"
  },
  "dependencies": {
    "@apidevtools/json-schema-ref-parser": "^11.6.2",
    "ecmarkup": "^21.4.0",
    "js-beautify": "^1.15.4",
    "lodash": "^4.17.21"
  }
}
